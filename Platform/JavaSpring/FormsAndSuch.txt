

Form Submission

    So far we have just been working with requests that display information from the server to the user. What if a request involves the client sending information to the server? The modern internet is user driven, much of the actual content ofa website is generated by the users ofa website, but how does a user provide content toa website? in one word: forms! HTML forms are the way in which users are able to pass data to the back end ofa website where the data can then be proccesssed and stored. Proccessing form data correctley i s a huge part of what it takes to become a bsack end dev


    Form Elements 

            <h3>Login</h3>
            <form action='/login' method='GET'>
            <label>Email:</label>
                <input type="text" name='email'>
            <label>Password:</label>
                <input type='text' name='password'>
                <input type='submit' value='login'>
            </form>

        Action Attribute: The route that handles the request, ie what happens when the button is pressed, the method mapped to this route will proccess the form which is not to be confused with the one that shows the form which is "/". 

        Method Attribute: Our options are GET and POST, beings that its submitting data well want it to be a POST request not a get request, which is the default

        Input Elements: Thease are the parts of the form that actually gather data from the user, there are various options for inputs and form elements, 

            Imput Types- https://www.w3schools.com/tags/att_input_type.asp

            Form Elements- https://www.w3schools.com/html/html_form_elements.asp 

        Submission: This can be done either <input type="submit" or <button>Submit</button> but notttttt <imput type="button"> tried that before dident work :D!


    Routes For Submission 

        When you submit a form it gets sent to your se rver through query paramaters The value argument must match the name attribute in your HTML form fields, 

            @RequestMapping("/login")
            public String login(
                @RequestParam(value="email") String email,
                    @RequestParam(value="password") String password) {
                
                    // CODE TO PROCESS FORM ie. check email and password
                    
                    return "results.jsp"; // <-- we'll change this when we learn redirecting
}

        After proccessing hte form we will eventually want to render a welcome message on a new page to show the user that they have logged in, for this example well simply render the results page at the end of the method, however Never render on a post request, only return. 



Get VS POST! 

    Get Requests 

        Whether or not you were aware! All of your requests and all of your route mappings youve been making have been for GET request!!!!! All of them!! Every Single ONE! lol, no biggie, IF, and only IF the @RequestMapping is not given a method type, it will be set to GET, so what is a get request?? 

        Let us go back to the hello human assignment, and the url query paramaters, in that assignment we used query strings to send some variables back to the server and tested in by pluggin in the url a name or a location 

        But no user, i mean no user, unless there trying something sketch is going to try and do that, so how are thease query strings actually used?? Well there used bby external applicaotns that want to communicate with your application but in terms of user interaction by submitting a form!! 

        When you press submit on a form it will go to the route given in the Action! attribute, which we leanred about earler, in the above case it goes to he "/login" route, and if the method is get, the data collected from the form will be set through query paramaters like it was in the hello human app

        like a search bar as well 

            <form action="/search">
                <label>Search:</label>
                <input type="text" name="searchTerm">
                <input type="submit">
            </form>

        IF i had that on my page, and searched why is the wky blue? it would send back this in the URL localhost:8080/?searchTerm=why+is+the+sky+blue%3 

        What values are we sending to the server? Its whatever gets typed in and sent, In this case itd be why is the sky blue? when a form action is set to GET the form input is sent to the server through the URl itself 

        For a search bar this is hella useful because the query paramaters ie the values you entered in the form, persist in the URL so yo ucan send the link to a friend and have them render the same page as you 

        and if it was a password, itd show all of our informaiton 

        
    GET Vs POST Cont! 

        If your paranoid, or as I like to term it, Security Concious! Then you wouldent feel comfortable leaving a URL that has all your login and password information in the browser, Even if its encripted, which some are, GET request main in browser history, because of this, and other tech reasons, sensitive information should be sent in the Body of the request, rather than as part of the url itself, which is where post requests come in. 

        Before we break down how to handel POST request in code, let us Compare and Contrast Get and Post Requests 

        GET!!               POST!!!
        
        Can be Cached!      Never Catched
        Stays In Browser!   Does Not!!
        Can be Bookmarked!  Cannot!!
        Length Restrictions! NO RESTRICTIONS!!!!!!!
        NEVER TO BE USED FOR SENSTIIVE DATA!!!!!! well, the opposite 



Post and Redirecting

    Post Mapping!

        To send form input as a POST reqest you will need to do two things!! 

        :D !

            First add the method type to your form in the html with the attribute method="post"
            
                <h3>Login</h3>
                <form action="/login" method="post">
                    <label>Email:</label>
                    <input type="text" name="email">
                    <label>Password:</label>
                    <input type="text" name="password">
                    <input type="submit">
                </form>

        Then we will add the named argument method to our @RequestMapping annotation also note that you must put the value in there as well or thell be hella errors on your IDE 

    
            @RequestMapping(value="/login", method=RequestMethod.POST)
            public String login(
                @RequestParam(value="email") String email,
                @RequestParam(value="password") String password) {
                // CODE TO PROCESS FORM ie. check email and password
                return "redirect:/dashboard";
            }

    Redirecting

        In the example above, we returned something new. instead of passing the view engine a path to a file to render, instead we are sending it an instuction to redirect: fancy eh? You can probabley guess whta it does :D! Well hopefully if not then well tell you, it redirects back to the controller to the mapped route indicated and executes that method instead of rendering a JSP file, we do that so it dosent show credit card info or login info etc, 

    
    Avoid Rendering POST!

        Never, just Never do this, nothing eles needs to be said, why? if you must, if the user refreshes after they see the confirmation page their browser will send this request a second time, if its a purchase congratz you just paid twice! :D you win stupid prizes! In order to avoid this we will have distinct routes to render pages, and distnct routes that perofrm actions like processing form submision sthen redirect, POST routes always redirect to other routes that will render views, unless the possability of unintentinoal outocmes has been elimnated this helps avoid exposing the uesr to uninteniontally send duplicate post requests. 


    Redirecting & Session! 

        Since we wil lbe redirecitng to another route we will need to save to session any information you need to persist, like user names etc, in subsuquent routes 

            @RequestMapping(value="/processPayment", method=RequestMethod.POST)
            public String processPayment(
                @RequestParam(value="creditCardNumber") Integer creditCardNumber,
                @RequestParam(value="expDate") Date expDate 
                @RequestParam(value="amount") Double amount {
                
                // Code here to complete the transaction and charge CC
                // ** Put any necessary information in session for later **
                    
                return "redirect:/confirm"; // <-- redirects to a /confirm render route.
            }

        this page renders to confirm, that route will show the information page with the amount charged and a message, that page will need to have the Model model on it so we can get the session info out of it. 

            @RequestMapping("/confirm")
            public String confirmationPage(Model model){
                
                // get any info needed out of session and add to the
                // view model to render on the page.
                    
                return "confirmation.jsp";
            }

    Alt Post Methods!

        Alternativley you can use the shorthand version of the @RequestMapping for Post request, and it functions the same way, 

            @PostMapping("/routeName") 
            public String login() {

            }

    Likewise you can use the same for get methods ie @GetMapping and theres no diff. 



Flash Data 

    Flash Data is data that only persists accross the next request, this sort of session data is very useful for things such as error messages, success notifications or anything else that would only be shown followinga request. 

    To use our flash data we hav eto inject the RedirectAttributes into our method, and add flash attributes to it. so in the section following the public String nameOfMethod we input the RedirectAttributes followed by redirectAttributes to add the flash attribute we use redirectAttributes.addFlashAttribute("key to be used in the c out", "what you want displayed if its triggered")


            @RequestMapping("/createError")
            public String flashMessages(RedirectAttributes redirectAttributes) {
                redirectAttributes.addFlashAttribute("error", "A test error!");
                return "redirect:/";

    You would place this in an if statement, not just there because it would trigger anytime someone went to that route, so itd be like if password.length < 5
    redirectAttributes.addFlashAttribute("error", "A test error!"); 



Dependecy Injection 

    So in code we provide parameters that we never provide arguments for, we declare the type and name them, and just provide the expected input, such as Model model We are able to do this because of Dependecy Injection. This is a powerful design pattern that inverts the usual control flow of a program, where the classes would instantiate the classes that it needs. This process iscalled Inversoin of Control, or IoC together IoC and DI are a large part of the modern Java frameworks, 

    The way it works is a container, the IoC container, fainds all the dependencies, instantiates them and injects them where required. Like the Model model in the controller methods. such as model.addAttribute, we never instantated model anywhere but its there for us to use due to the IoC container. This process decouples the class construction from the constuction of its dependencies which results in cleaner, more modular and more maintainable code. it also makes testing when we arrive there much easier. 

        IoC Documentation

            https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans

            